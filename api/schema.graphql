### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AccountInfo {
  accountHolder: String!
  accountNumber: String!
  bankName: String!
}

input AccountInfoInput {
  accountHolder: String!
  accountNumber: String!
  bankName: String!
}

type Admin {
  createdAt: DateTime!
  id: Int!
  loginId: String!
  state: AdminState!
}

input AdminOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  loginId: SortOrder
  password: SortOrder
  product: ProductOrderByRelationAggregateInput
  state: SortOrder
}

enum AdminState {
  ACTIVE
  DELETED
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  loginId: StringFilter
  password: StringFilter
  product: ProductListRelationFilter
  state: EnumAdminStateFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

type Category {
  a077Code: String!
  b378Code: Int!
  c1: String!
  c1Name: String!
  c2: String!
  c2Name: String!
  c3: String!
  c3Name: String!
  c4: String!
  c4Name: String!
  code: String!
  id: Int!
  siilCode: String!
}

input CategoryOrderByWithRelationInput {
  a077Code: SortOrder
  b378Code: SortOrder
  c1: SortOrder
  c1Name: SortOrder
  c2: SortOrder
  c2Name: SortOrder
  c3: SortOrder
  c3Name: SortOrder
  c4: SortOrder
  c4Name: SortOrder
  code: SortOrder
  id: SortOrder
  product: ProductOrderByRelationAggregateInput
  siilCode: SortOrder
}

type CategorySelectType {
  code: String!
  name: String!
}

type CategoryStore {
  acode: String!
  cateStateCdate: DateTime
  cateStatePdate: DateTime
  ccode: String!
  dc1: String!
  dc1Name: String!
  dc2: String!
  dc2Name: String!
  dc3: String!
  dc3Name: String!
  dc4: String!
  dc4Name: String!
  id: Int!
  pcode: String!
  state: CategoryStoreState!
}

enum CategoryStoreState {
  CHANGE
  DELETE
  NORMAL
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  a077Code: StringFilter
  b378Code: IntFilter
  c1: StringFilter
  c1Name: StringFilter
  c2: StringFilter
  c2Name: StringFilter
  c3: StringFilter
  c3Name: StringFilter
  c4: StringFilter
  c4Name: StringFilter
  code: StringFilter
  id: IntFilter
  product: ProductListRelationFilter
  siilCode: StringFilter
}

input CategoryWhereUniqueInput {
  a077Code: String
  code: String
  id: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumAdminStateFilter {
  equals: AdminState
  in: [AdminState!]
  not: NestedEnumAdminStateFilter
  notIn: [AdminState!]
}

input EnumOrderStateFilter {
  equals: OrderState
  in: [OrderState!]
  not: NestedEnumOrderStateFilter
  notIn: [OrderState!]
}

input EnumProductStateFilter {
  equals: ProductState
  in: [ProductState!]
  not: NestedEnumProductStateFilter
  notIn: [ProductState!]
}

input EnumProductStoreLogUploadStateFilter {
  equals: ProductStoreLogUploadState
  in: [ProductStoreLogUploadState!]
  not: NestedEnumProductStoreLogUploadStateFilter
  notIn: [ProductStoreLogUploadState!]
}

input EnumPurchaseLogStateFilter {
  equals: PurchaseLogState
  in: [PurchaseLogState!]
  not: NestedEnumPurchaseLogStateFilter
  notIn: [PurchaseLogState!]
}

input EnumPurchaseLogTypeFilter {
  equals: PurchaseLogType
  in: [PurchaseLogType!]
  not: NestedEnumPurchaseLogTypeFilter
  notIn: [PurchaseLogType!]
}

input EnumTaobaoOrderStateFilter {
  equals: TaobaoOrderState
  in: [TaobaoOrderState!]
  not: NestedEnumTaobaoOrderStateFilter
  notIn: [TaobaoOrderState!]
}

input EnumUserStateFilter {
  equals: UserState
  in: [UserState!]
  not: NestedEnumUserStateFilter
  notIn: [UserState!]
}

enum ExcelSampleEnum {
  COLLECT_PRODUCT
  DENY_WORD
  REPLACE_WORD
}

type Faq {
  FaqCategory: FaqCategory!
  categoryId: Int!
  content: String!
  contentSummary(wordCount: Int): String!
  createdAt: DateTime!
  id: Int!
  title: String!
}

type FaqCategory {
  faq(cursor: FaqWhereUniqueInput, skip: Int, take: Int): [Faq!]!
  id: Int!
  isActive: Boolean!
  name: String!
  order: Int!
}

input FaqCategoryOrderByWithRelationInput {
  faq: FaqOrderByRelationAggregateInput
  id: SortOrder
  isActive: SortOrder
  name: SortOrder
  order: SortOrder
}

input FaqCategoryWhereInput {
  AND: [FaqCategoryWhereInput!]
  NOT: [FaqCategoryWhereInput!]
  OR: [FaqCategoryWhereInput!]
  faq: FaqListRelationFilter
  id: IntFilter
  isActive: BoolFilter
  name: StringFilter
  order: IntFilter
}

input FaqCategoryWhereUniqueInput {
  id: Int
}

input FaqListRelationFilter {
  every: FaqWhereInput
  none: FaqWhereInput
  some: FaqWhereInput
}

input FaqOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input FaqOrderByWithRelationInput {
  FaqCategory: FaqCategoryOrderByWithRelationInput
  categoryId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  title: SortOrder
}

input FaqWhereInput {
  AND: [FaqWhereInput!]
  FaqCategory: FaqCategoryWhereInput
  NOT: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  categoryId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  title: StringFilter
}

input FaqWhereUniqueInput {
  id: Int
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  addSetDataByUser(siteCode: String!, siteUserId: String!, siteUserPw: String!, siteUseretc1: String!, siteUseretc2: String!, siteUseretc3: String!, siteUseretc4: String!, siteUseretc5: String!, siteUseretc6: String!): UserShopData!
  addWordByExcelByUser(data: Upload!, isReplace: Boolean!): Boolean!
  addWordByUser(findWord: String!, replaceWord: String): Boolean!
  cancelPurchasePlanByUser(merchantUid: String!): Boolean!
  changeMyPasswordByAdmin(currentPassword: String!, newPassword: String!): Boolean!
  changeOrderStateByUser(destState: OrderState!, orderIds: [String!]!): String!
  changePasswordByUser(currentPassword: String!, newPassword: String!): Boolean!
  connectSocialIdByUser(socialId: String!, userType: UserSocialType!): User!
  createFaqByAdmin(content: String!, faqCategoryId: Int!, title: String!): Boolean!
  createFaqCategoryByAdmin(name: String!): FaqCategory!
  createNoticeByAdmin(attachment: Upload, content: String!, title: String!): Boolean!
  createShopDataByUser(siteCode: String!, siteUserId: String!, siteUserPw: String!, siteUseretc1: String!, siteUseretc2: String!, siteUseretc3: String!, siteUseretc4: String!, siteUseretc5: String!, siteUseretc6: String!): UserShopData!
  createUserQuestionByUser(attachment: [Upload!], content: String!, title: String!): Boolean!
  deleteFaqByAdmin(faqIds: [Int!]!): Int!
  deleteFaqCategoryByAdmin(faqCategoryId: Int!): Boolean!
  deleteNoticeByAdmin(noticeIds: [Int!]!): Int!
  deleteProductByAdmin(productId: Int!): Boolean!
  deleteProductByUser(productId: Int!): Boolean!
  deleteWordByUser(wordId: Int!): Boolean!
  endProductSellStateByAdmin(productIds: [Int!]!): Int!
  endProductSellStateByUser(productIds: [Int!]!): Int!

  """상품 ID/URL로 상품 가져오기"""
  getTaobaoItemUsingExcelFileByAdmin(categoryCode: String, data: Upload!, siilCode: String, userId: Int): Int!

  """상품 ID/URL로 상품 가져오기"""
  getTaobaoItemUsingExcelFileByUser(categoryCode: String, data: Upload!, siilCode: String): Int!
  getTaobaoItemUsingExtensionByUser(data: String!): String!

  """상품 ID/URL로 상품 가져오기"""
  getTaobaoItemUsingNumIidsByAdmin(categoryCode: String, siilCode: String, taobaoIds: [String!]!, userId: Int): Int!

  """상품 ID/URL로 상품 가져오기"""
  getTaobaoItemUsingNumIidsByUser(categoryCode: String, siilCode: String, taobaoIds: [String!]!): Int!

  """키워드 검색으로 상품 가져오기"""
  getTaobaoItemsByAdmin(categoryCode: String, endPrice: Float, orderBy: TaobaoItemOrderBy!, page: Int = 1, pageCount: Int = 1, query: String!, siilCode: String, startPrice: Float, userId: Int): Boolean!

  """키워드 검색으로 상품 가져오기"""
  getTaobaoItemsByUser(categoryCode: String, endPrice: Float, orderBy: TaobaoItemOrderBy!, page: Int = 1, pageCount: Int = 1, query: String!, siilCode: String, startPrice: Float): Boolean!
  invalidatePurchaseInfoByAdmin(purchaseLogId: Int!): Boolean!
  modifyFaqCategoryByAdmin(faqCategoryId: Int!, isActive: Boolean, name: String): FaqCategory!
  modifyWordByUser(findWord: String!, replaceWord: String, wordId: Int!): Boolean!
  purchasePlanByUser(merchantUid: String!, planInfoId: Int!): Int!
  registerProductByUser(productIds: [Int!]!, setDataId: Int!): String!
  registerProductsByAdmin(productIds: [Int!]!, setDataIds: [Int!]!): String!
  registerProductsByUser(productIds: [Int!]!, setDataIds: [Int!]!): String!
  renewToken(accessToken: String!, refreshToken: String!): SignInType
  requestPhoneVerificationByEveryone(phoneNumber: String!): Boolean!
  scrapOrderByUser(collectNewOrder: Boolean!, shopDataId: Int!): String!
  setMaxProductLimitByAdmin(
    """미설정시 무제한"""
    productLimit: Int
    userId: Int!
  ): Boolean!
  setPurchaseInfoByAdmin(planInfoId: Int!, userId: Int!): Boolean!
  signInAdminByEveryone(
    id: String!

    """소셜의 경우 그냥 빈 문자열"""
    password: String!
  ): SignInType!
  signInUserByEveryone(
    email: String!

    """소셜의 경우 그냥 빈 문자열"""
    password: String!
    userType: UserSocialType!
  ): SignInType!
  signInUserForImageProgramByEveryone(
    email: String!

    """소셜의 경우 그냥 빈 문자열"""
    password: String!
    userType: UserLoginType!
  ): String!
  signUpAdminByAdmin(id: String!, password: String!): Boolean!
  signUpUserByEveryone(email: String!, password: String!, phone: String!, verificationId: Int!): SignInType!
  sortFaqCategoryByAdmin(faqCategoryIds: [Int!]!): Boolean!
  t_createProduct: Boolean
  transferProductsToUserByAdmin(productIds: [Int!]!, targetUserId: Int!): String!
  translateProductTextByUser(id: Int!, type: TranslateTargetEnumType!): String!
  translateProductsTextByUser(ids: [Int!]!, type: TranslateTargetEnumType!): String!
  updateCategoryStoreDataByAdmin: Boolean!
  updateCnyRateByAdmin(cnyRate: Float!): Float!
  updateFaqByAdmin(content: String, faqCategoryId: Int, faqId: Int!, title: String): Boolean!
  updateFreeUserDayLimitByAdmin(day: Int!): Int!
  updateFreeUserProductLimitByAdmin(day: Int!): Int!
  updateManyProductCategoryByAdmin(categoryCode: String!, productIds: [Int!]!): Int!
  updateManyProductCategoryByUser(categoryCode: String!, productIds: [Int!]!): Int!
  updateManyProductSiilInfoByAdmin(productIds: [Int!]!, siilCode: String!): Int!
  updateManyProductSiilInfoByUser(productIds: [Int!]!, siilCode: String!): Int!
  updateMyDataByUser(additionalShippingFeeJeju: Int, asInformation: String, asTel: String, cnyRate: Float, companyFile: Upload, companyInfo: UserCompanyInfoInput, defaultShippingFee: Int, exchangeShippingFee: Int, fixImageBottom: Upload, fixImageTop: Upload, isPersonal: Boolean, marginRate: Float, refundAccountInfoData: AccountInfoInput, refundShippingFee: Int): Boolean!
  updateNoticeByAdmin(attachment: Upload, content: String, noticeId: Int!, title: String): Boolean!
  updatePhoneByUser(phone: String!, verificationId: Int!): Boolean!
  updatePlanInfoByAdmin(description: String, isActive: Boolean, name: String, planId: Int!, price: Int): PlanInfo!
  updateProductByAdmin(categoryCode: String, description: String, localShippingFee: Float, name: String, optionNames: [ProductOptionNameUpdateInput!]!, optionValues: [ProductOptionValueUpdateInput!]!, options: [ProductOptionUpdateInput!]!, price: Int, productId: Int!, siilCode: String, siilData: [SiilInput!], thumbnails: [ProductThumbnailUpdateInput!]): Product!
  updateProductByUser(categoryCode: String, description: String, localShippingFee: Float, name: String, optionNames: [ProductOptionNameUpdateInput!]!, optionValues: [ProductOptionValueUpdateInput!]!, options: [ProductOptionUpdateInput!]!, price: Int, productId: Int!, siilCode: String, siilData: [SiilInput!], thumbnails: [ProductThumbnailUpdateInput!]): Product!
  updateProductImageBySomeone(description: String, optionValues: [ProductOptionValueImageUpdateInput!]!, productId: Int!, thumbnails: [ProductThumbnailImageUpdateInput!]): Product!
  updateProductNameByAdmin(name: String!, productId: Int!): Product!
  updateProductNameByUser(name: String!, productId: Int!): Product!
  updateProductPriceByAdmin(cnyRate: Float!, marginRate: Float!, productIds: [Int!]!, shippingFee: Int!): Int!
  updateProductPriceByUser(cnyRate: Float!, marginRate: Float!, productIds: [Int!]!, shippingFee: Int!): Int!
  updateShopDataByUser(siteUserId: String, siteUserPw: String, siteUseretc1: String, siteUseretc2: String, siteUseretc3: String, siteUseretc4: String, siteUseretc5: String, siteUseretc6: String, userShopDataId: Int!): UserShopData!
  updateTaobaoRefreshDayByAdmin(day: Int!): Int!
  updateUserQuestionByAdmin(answer: String!, userQuestionId: Int!): Boolean!
  verifyPhoneByEveryone(phoneNumber: String!, verificationNumber: String!): Int!
  withdrawByUser: Boolean!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumAdminStateFilter {
  equals: AdminState
  in: [AdminState!]
  not: NestedEnumAdminStateFilter
  notIn: [AdminState!]
}

input NestedEnumOrderStateFilter {
  equals: OrderState
  in: [OrderState!]
  not: NestedEnumOrderStateFilter
  notIn: [OrderState!]
}

input NestedEnumProductStateFilter {
  equals: ProductState
  in: [ProductState!]
  not: NestedEnumProductStateFilter
  notIn: [ProductState!]
}

input NestedEnumProductStoreLogUploadStateFilter {
  equals: ProductStoreLogUploadState
  in: [ProductStoreLogUploadState!]
  not: NestedEnumProductStoreLogUploadStateFilter
  notIn: [ProductStoreLogUploadState!]
}

input NestedEnumPurchaseLogStateFilter {
  equals: PurchaseLogState
  in: [PurchaseLogState!]
  not: NestedEnumPurchaseLogStateFilter
  notIn: [PurchaseLogState!]
}

input NestedEnumPurchaseLogTypeFilter {
  equals: PurchaseLogType
  in: [PurchaseLogType!]
  not: NestedEnumPurchaseLogTypeFilter
  notIn: [PurchaseLogType!]
}

input NestedEnumTaobaoOrderStateFilter {
  equals: TaobaoOrderState
  in: [TaobaoOrderState!]
  not: NestedEnumTaobaoOrderStateFilter
  notIn: [TaobaoOrderState!]
}

input NestedEnumUserStateFilter {
  equals: UserState
  in: [UserState!]
  not: NestedEnumUserStateFilter
  notIn: [UserState!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Notice {
  attachmentFile: String
  content: String!
  contentSummary(wordCount: Int): String!
  createdAt: DateTime!
  id: Int!
  isVisible: Boolean!
  title: String!
  viewCount: Int!
}

input NoticeOrderByWithRelationInput {
  attachmentFile: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isVisible: SortOrder
  title: SortOrder
  viewCount: SortOrder
}

input NoticeWhereInput {
  AND: [NoticeWhereInput!]
  NOT: [NoticeWhereInput!]
  OR: [NoticeWhereInput!]
  attachmentFile: StringNullableFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  isVisible: BoolFilter
  title: StringFilter
  viewCount: IntFilter
}

input NoticeWhereUniqueInput {
  id: Int
}

type Order {
  buyerName: String!
  customId: String!
  deliveryExpiredAt: DateTime!
  id: String!
  isCustomIdValid: Boolean
  optionName: String!
  orderProductNumber: String!
  orderState: Int!
  orderedAt: DateTime!
  originalData: String!
  payPrice: Int!
  product: Product
  productId: Int
  productName: String!
  quantity: Int!
  receiverName: String!
  sellerProductCode: String!
  shippingFee: Int!
  state: OrderState!
  storeProductId: String!
  storeUrl: String
  userShopData: UserShopData!
  userShopDataId: Int!
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

input OrderOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input OrderOrderByWithRelationInput {
  buyerName: SortOrder
  customId: SortOrder
  deliveryExpiredAt: SortOrder
  id: SortOrder
  isCustomIdValid: SortOrder
  optionName: SortOrder
  orderProductNumber: SortOrder
  orderState: SortOrder
  orderedAt: SortOrder
  originalData: SortOrder
  payPrice: SortOrder
  product: ProductOrderByWithRelationInput
  productId: SortOrder
  productName: SortOrder
  quantity: SortOrder
  receiverName: SortOrder
  sellerProductCode: SortOrder
  shippingFee: SortOrder
  shippingType: SortOrder
  state: SortOrder
  storeProductId: SortOrder
  taobaoOrder: TaobaoOrderOrderByWithRelationInput
  taobaoOrderId: SortOrder
  userShopData: UserShopDataOrderByWithRelationInput
  userShopDataId: SortOrder
}

enum OrderState {
  CLAIMED
  NEW
  ORDERED
}

input OrderUQ_order_number_dataCompoundUniqueInput {
  orderProductNumber: String!
  userShopDataId: Int!
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  buyerName: StringFilter
  customId: StringFilter
  deliveryExpiredAt: DateTimeFilter
  id: StringFilter
  isCustomIdValid: BoolNullableFilter
  optionName: StringFilter
  orderProductNumber: StringFilter
  orderState: IntFilter
  orderedAt: DateTimeFilter
  originalData: StringFilter
  payPrice: IntFilter
  product: ProductWhereInput
  productId: IntNullableFilter
  productName: StringFilter
  quantity: IntFilter
  receiverName: StringFilter
  sellerProductCode: StringFilter
  shippingFee: IntFilter
  shippingType: StringFilter
  state: EnumOrderStateFilter
  storeProductId: StringFilter
  taobaoOrder: TaobaoOrderWhereInput
  taobaoOrderId: IntNullableFilter
  userShopData: UserShopDataWhereInput
  userShopDataId: IntFilter
}

input OrderWhereUniqueInput {
  UQ_order_number_data: OrderUQ_order_number_dataCompoundUniqueInput
  id: String
}

type PhoneVerification {
  createdAt: DateTime!
  id: Int!
  tel: String!
  verificationNumber: String!
}

type PlanInfo {
  description: String!
  externalFeatureVariableId: String
  id: Int!
  isActive: Boolean!
  month: Int!
  name: String!
  planLevel: Int
  price: Int!
}

input PlanInfoOrderByWithRelationInput {
  description: SortOrder
  externalFeatureVariableId: SortOrder
  id: SortOrder
  isActive: SortOrder
  month: SortOrder
  name: SortOrder
  planLevel: SortOrder
  price: SortOrder
}

input PlanInfoWhereInput {
  AND: [PlanInfoWhereInput!]
  NOT: [PlanInfoWhereInput!]
  OR: [PlanInfoWhereInput!]
  description: StringFilter
  externalFeatureVariableId: StringNullableFilter
  id: IntFilter
  isActive: BoolFilter
  month: IntFilter
  name: StringFilter
  planLevel: IntNullableFilter
  price: IntFilter
}

input PlanInfoWhereUniqueInput {
  id: Int
}

type Product {
  admin: Admin
  adminId: Int
  category: Category
  categoryCode: String
  cnyRate: Float!
  createdAt: DateTime!
  description: String!
  id: Int!
  imageThumbnail: [String!]!
  imageThumbnailData: String!
  isImageTranslated: Boolean!
  isNameTranslated: Boolean!
  localShippingFee: Float!
  marginRate: Float!
  modifiedAt: DateTime!
  name: String!
  optionInfoHtml: String!
  price: Int!
  productCode: String!
  productOption(cursor: ProductOptionWhereUniqueInput, orderBy: [ProductOptionOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOptionWhereInput): [ProductOption!]!
  productOptionName(cursor: ProductOptionNameWhereUniqueInput, orderBy: [ProductOptionNameOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOptionNameWhereInput): [ProductOptionName!]!
  productStore(cursor: ProductStoreWhereUniqueInput, orderBy: [ProductStoreOrderByWithRelationInput!], skip: Int, take: Int, where: ProductStoreWhereInput): [ProductStore!]!
  shippingFee: Int!
  siilCode: String
  siilData: String
  siilInfo: SiilSavedData
  state: ProductState!
  stockUpdatedAt: DateTime!
  taobaoProduct: TaobaoProduct!
  taobaoProductId: Int!
  user: User
  userId: Int
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

type ProductOption {
  id: Int!
  isActive: Boolean!
  name: String!
  optionString: String!
  optionValue1: ProductOptionValue!
  optionValue1Id: Int!
  optionValue2: ProductOptionValue
  optionValue2Id: Int
  optionValue3: ProductOptionValue
  optionValue3Id: Int
  price: Int!
  priceCny: Float!
  product: Product!
  productId: Int!
  stock: Int
  taobaoSkuId: String!
}

input ProductOptionListRelationFilter {
  every: ProductOptionWhereInput
  none: ProductOptionWhereInput
  some: ProductOptionWhereInput
}

type ProductOptionName {
  id: Int!
  isNameTranslated: Boolean!
  name: String!
  order: Int!
  product: Product!
  productId: Int!
  productOptionValue(cursor: ProductOptionValueWhereUniqueInput, orderBy: [ProductOptionValueOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOptionValueWhereInput): [ProductOptionValue!]!
  taobaoPid: String!
}

input ProductOptionNameListRelationFilter {
  every: ProductOptionNameWhereInput
  none: ProductOptionNameWhereInput
  some: ProductOptionNameWhereInput
}

input ProductOptionNameOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input ProductOptionNameOrderByWithRelationInput {
  hasImage: SortOrder
  id: SortOrder
  isNameTranslated: SortOrder
  name: SortOrder
  order: SortOrder
  product: ProductOrderByWithRelationInput
  productId: SortOrder
  productOptionValue: ProductOptionValueOrderByRelationAggregateInput
  taobaoPid: SortOrder
}

input ProductOptionNameUpdateInput {
  id: Int!
  name: String!
}

input ProductOptionNameWhereInput {
  AND: [ProductOptionNameWhereInput!]
  NOT: [ProductOptionNameWhereInput!]
  OR: [ProductOptionNameWhereInput!]
  hasImage: BoolFilter
  id: IntFilter
  isNameTranslated: BoolFilter
  name: StringFilter
  order: IntFilter
  product: ProductWhereInput
  productId: IntFilter
  productOptionValue: ProductOptionValueListRelationFilter
  taobaoPid: StringFilter
}

input ProductOptionNameWhereUniqueInput {
  id: Int
}

input ProductOptionOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input ProductOptionOrderByWithRelationInput {
  id: SortOrder
  isActive: SortOrder
  optionString: SortOrder
  optionValue1: ProductOptionValueOrderByWithRelationInput
  optionValue1Id: SortOrder
  optionValue2: ProductOptionValueOrderByWithRelationInput
  optionValue2Id: SortOrder
  optionValue3: ProductOptionValueOrderByWithRelationInput
  optionValue3Id: SortOrder
  price: SortOrder
  priceCny: SortOrder
  product: ProductOrderByWithRelationInput
  productId: SortOrder
  stock: SortOrder
  taobaoSkuId: SortOrder
}

input ProductOptionUQ_product_id_sku_idCompoundUniqueInput {
  productId: Int!
  taobaoSkuId: String!
}

input ProductOptionUQ_product_optionCompoundUniqueInput {
  optionValue1Id: Int!
  optionValue2Id: Int!
  optionValue3Id: Int!
}

input ProductOptionUpdateInput {
  id: Int!
  isActive: Boolean!
  price: Int!
}

type ProductOptionValue {
  id: Int!
  image: String
  isNameTranslated: Boolean!
  name: String!
  number: Int!
  optionNameOrder: Int!
  productOption(cursor: ProductOptionWhereUniqueInput, orderBy: [ProductOptionOrderByWithRelationInput], skip: Int, take: Int, where: ProductOptionWhereInput): [ProductOption!]!
  productOption1(cursor: ProductOptionWhereUniqueInput, orderBy: [ProductOptionOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOptionWhereInput): [ProductOption!]!
  productOption2(cursor: ProductOptionWhereUniqueInput, orderBy: [ProductOptionOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOptionWhereInput): [ProductOption!]!
  productOption3(cursor: ProductOptionWhereUniqueInput, orderBy: [ProductOptionOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOptionWhereInput): [ProductOption!]!
  productOptionName: ProductOptionName!
  productOptionNameId: Int!
  taobaoVid: String!
}

input ProductOptionValueImageUpdateInput {
  id: Int!
  image: String
  newImageBase64: String
}

input ProductOptionValueListRelationFilter {
  every: ProductOptionValueWhereInput
  none: ProductOptionValueWhereInput
  some: ProductOptionValueWhereInput
}

input ProductOptionValueOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input ProductOptionValueOrderByWithRelationInput {
  id: SortOrder
  image: SortOrder
  isNameTranslated: SortOrder
  name: SortOrder
  number: SortOrder
  optionNameOrder: SortOrder
  productOption1: ProductOptionOrderByRelationAggregateInput
  productOption2: ProductOptionOrderByRelationAggregateInput
  productOption3: ProductOptionOrderByRelationAggregateInput
  productOptionName: ProductOptionNameOrderByWithRelationInput
  productOptionNameId: SortOrder
  taobaoVid: SortOrder
}

input ProductOptionValueUpdateInput {
  id: Int!
  image: String
  name: String!
  newImage: Upload
  newImageBase64: String
}

input ProductOptionValueWhereInput {
  AND: [ProductOptionValueWhereInput!]
  NOT: [ProductOptionValueWhereInput!]
  OR: [ProductOptionValueWhereInput!]
  id: IntFilter
  image: StringNullableFilter
  isNameTranslated: BoolFilter
  name: StringFilter
  number: IntFilter
  optionNameOrder: IntFilter
  productOption1: ProductOptionListRelationFilter
  productOption2: ProductOptionListRelationFilter
  productOption3: ProductOptionListRelationFilter
  productOptionName: ProductOptionNameWhereInput
  productOptionNameId: IntFilter
  taobaoVid: StringFilter
}

input ProductOptionValueWhereUniqueInput {
  id: Int
}

input ProductOptionWhereInput {
  AND: [ProductOptionWhereInput!]
  NOT: [ProductOptionWhereInput!]
  OR: [ProductOptionWhereInput!]
  id: IntFilter
  isActive: BoolFilter
  optionString: StringFilter
  optionValue1: ProductOptionValueWhereInput
  optionValue1Id: IntFilter
  optionValue2: ProductOptionValueWhereInput
  optionValue2Id: IntNullableFilter
  optionValue3: ProductOptionValueWhereInput
  optionValue3Id: IntNullableFilter
  price: IntFilter
  priceCny: FloatFilter
  product: ProductWhereInput
  productId: IntFilter
  stock: IntNullableFilter
  taobaoSkuId: StringFilter
}

input ProductOptionWhereUniqueInput {
  UQ_product_id_sku_id: ProductOptionUQ_product_id_sku_idCompoundUniqueInput
  UQ_product_option: ProductOptionUQ_product_optionCompoundUniqueInput
  id: Int
}

input ProductOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input ProductOrderByWithRelationInput {
  admin: AdminOrderByWithRelationInput
  adminId: SortOrder
  category: CategoryOrderByWithRelationInput
  categoryCode: SortOrder
  cnyRate: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  imageThumbnailData: SortOrder
  isImageTranslated: SortOrder
  isNameTranslated: SortOrder
  localShippingFee: SortOrder
  marginRate: SortOrder
  modifiedAt: SortOrder
  name: SortOrder
  order: OrderOrderByRelationAggregateInput
  price: SortOrder
  productCode: SortOrder
  productOption: ProductOptionOrderByRelationAggregateInput
  productOptionName: ProductOptionNameOrderByRelationAggregateInput
  productStore: ProductStoreOrderByRelationAggregateInput
  shippingFee: SortOrder
  siilCode: SortOrder
  siilData: SortOrder
  state: SortOrder
  stockUpdatedAt: SortOrder
  taobaoProduct: TaobaoProductOrderByWithRelationInput
  taobaoProductId: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ProductState {
  COLLECTED
  ON_SALE
  SELL_DONE
  UPLOAD_FAILED
  UPLOAD_WAITING
}

type ProductStore {
  etcVendorItemId: String
  id: Int!
  product: Product!
  productId: Int!
  productStoreLog(cursor: ProductStoreLogWhereUniqueInput, orderBy: [ProductStoreLogOrderByWithRelationInput!], skip: Int, take: Int, where: ProductStoreLogWhereInput): [ProductStoreLog!]!
  productStoreState: ProductStoreState!
  state: Int!
  storeProductId: String
  storeUrl: String
  userSetData: UserSetData
  userSetDataId: Int
  userShopData: UserShopData!
  userShopDataId: Int!
}

input ProductStoreListRelationFilter {
  every: ProductStoreWhereInput
  none: ProductStoreWhereInput
  some: ProductStoreWhereInput
}

type ProductStoreLog {
  createdAt: DateTime!
  destState: Int!
  errorMessage: String!
  id: Int!
  jobId: String!
  modifiedAt: DateTime!
  productStore: ProductStore!
  productStoreId: Int!
  productStoreState: ProductStoreState!
  uploadState: ProductStoreLogUploadState!
}

input ProductStoreLogListRelationFilter {
  every: ProductStoreLogWhereInput
  none: ProductStoreLogWhereInput
  some: ProductStoreLogWhereInput
}

input ProductStoreLogOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input ProductStoreLogOrderByWithRelationInput {
  createdAt: SortOrder
  destState: SortOrder
  errorMessage: SortOrder
  id: SortOrder
  jobId: SortOrder
  modifiedAt: SortOrder
  productStore: ProductStoreOrderByWithRelationInput
  productStoreId: SortOrder
  productStoreState: ProductStoreStateOrderByWithRelationInput
  uploadState: SortOrder
}

enum ProductStoreLogUploadState {
  CANCEL
  FAIL
  ON_PROGRESS
  SUCCESS
  WAIT
}

input ProductStoreLogWhereInput {
  AND: [ProductStoreLogWhereInput!]
  NOT: [ProductStoreLogWhereInput!]
  OR: [ProductStoreLogWhereInput!]
  createdAt: DateTimeFilter
  destState: IntFilter
  errorMessage: StringFilter
  id: IntFilter
  jobId: StringFilter
  modifiedAt: DateTimeFilter
  productStore: ProductStoreWhereInput
  productStoreId: IntFilter
  productStoreState: ProductStoreStateWhereInput
  uploadState: EnumProductStoreLogUploadStateFilter
}

input ProductStoreLogWhereUniqueInput {
  id: Int
}

input ProductStoreOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input ProductStoreOrderByWithRelationInput {
  etcVendorItemId: SortOrder
  id: SortOrder
  product: ProductOrderByWithRelationInput
  productId: SortOrder
  productStoreLog: ProductStoreLogOrderByRelationAggregateInput
  productStoreState: ProductStoreStateOrderByWithRelationInput
  state: SortOrder
  storeProductId: SortOrder
  userSetData: UserSetDataOrderByWithRelationInput
  userSetDataId: SortOrder
  userShopData: UserShopDataOrderByWithRelationInput
  userShopDataId: SortOrder
}

type ProductStoreState {
  description: String!
  id: Int!
  name: String!
}

input ProductStoreStateOrderByWithRelationInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  productStore: ProductStoreOrderByRelationAggregateInput
  productStoreLog: ProductStoreLogOrderByRelationAggregateInput
}

input ProductStoreStateWhereInput {
  AND: [ProductStoreStateWhereInput!]
  NOT: [ProductStoreStateWhereInput!]
  OR: [ProductStoreStateWhereInput!]
  description: StringFilter
  id: IntFilter
  name: StringFilter
  productStore: ProductStoreListRelationFilter
  productStoreLog: ProductStoreLogListRelationFilter
}

input ProductStoreWhereInput {
  AND: [ProductStoreWhereInput!]
  NOT: [ProductStoreWhereInput!]
  OR: [ProductStoreWhereInput!]
  etcVendorItemId: StringNullableFilter
  id: IntFilter
  product: ProductWhereInput
  productId: IntFilter
  productStoreLog: ProductStoreLogListRelationFilter
  productStoreState: ProductStoreStateWhereInput
  state: IntFilter
  storeProductId: StringNullableFilter
  userSetData: UserSetDataWhereInput
  userSetDataId: IntNullableFilter
  userShopData: UserShopDataWhereInput
  userShopDataId: IntFilter
}

input ProductStoreWhereUniqueInput {
  id: Int
}

input ProductThumbnailImageUpdateInput {
  defaultImage: String!
  uploadImageBase64: String
}

input ProductThumbnailUpdateInput {
  defaultImage: String!
  uploadImage: Upload
}

input ProductUQ_user_id_taobao_product_idCompoundUniqueInput {
  taobaoProductId: Int!
  userId: Int!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  admin: AdminWhereInput
  adminId: IntNullableFilter
  category: CategoryWhereInput
  categoryCode: StringNullableFilter
  cnyRate: FloatFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: IntFilter
  imageThumbnailData: StringFilter
  isImageTranslated: BoolFilter
  isNameTranslated: BoolFilter
  localShippingFee: FloatFilter
  marginRate: FloatFilter
  modifiedAt: DateTimeFilter
  name: StringFilter
  order: OrderListRelationFilter
  price: IntFilter
  productCode: StringFilter
  productOption: ProductOptionListRelationFilter
  productOptionName: ProductOptionNameListRelationFilter
  productStore: ProductStoreListRelationFilter
  shippingFee: IntFilter
  siilCode: StringNullableFilter
  siilData: StringNullableFilter
  state: EnumProductStateFilter
  stockUpdatedAt: DateTimeFilter
  taobaoProduct: TaobaoProductWhereInput
  taobaoProductId: IntFilter
  user: UserWhereInput
  userId: IntNullableFilter
}

input ProductWhereUniqueInput {
  UQ_user_id_taobao_product_id: ProductUQ_user_id_taobao_product_idCompoundUniqueInput
  id: Int
}

type PurchaseLog {
  expiredAt: DateTime!
  id: Int!
  payAmount: Int!
  payId: String
  planInfo: String!
  purchasedAt: DateTime!
  state: PurchaseLogState!
  type: PurchaseLogType!
  user: User!
  userId: Int!
}

input PurchaseLogListRelationFilter {
  every: PurchaseLogWhereInput
  none: PurchaseLogWhereInput
  some: PurchaseLogWhereInput
}

input PurchaseLogOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

enum PurchaseLogState {
  ACTIVE
  ENDED
  REFUNDED
  WAIT_DEPOSIT
  WAIT_PAYMENT
}

enum PurchaseLogType {
  IMAGE_TRANSLATE
  PLAN
  STOCK
}

input PurchaseLogWhereInput {
  AND: [PurchaseLogWhereInput!]
  NOT: [PurchaseLogWhereInput!]
  OR: [PurchaseLogWhereInput!]
  expiredAt: DateTimeFilter
  id: IntFilter
  payAmount: IntFilter
  payId: StringNullableFilter
  planInfo: StringFilter
  purchasedAt: DateTimeFilter
  state: EnumPurchaseLogStateFilter
  type: EnumPurchaseLogTypeFilter
  user: UserWhereInput
  userId: IntFilter
}

type Query {
  getExcelSampleUrlBySomeone(type: ExcelSampleEnum!): String!
  getRegisterProductsDataByUser(productIds: [Int!]!, userShopDataId: Int!): String!

  """생성 시 : userShopDataId만, 수정 시 : userSetDataId만 (동시에 넣지 말 것)"""
  getUserSetObjectByUser(userSetDataId: Int, userShopDataId: Int): SetParamType!
  searchCategoriesBySomeone(keyword: String!): [Category!]!
  selectCategoriesByHierarchicalBySomeone(code: String): [CategorySelectType!]!
  selectCategoriesBySomeone(cursor: CategoryWhereUniqueInput, orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  selectCnyRateByEveryone: Float!
  selectFaqCategoriesByEveryone(cursor: FaqCategoryWhereUniqueInput, orderBy: [FaqCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: FaqCategoryWhereInput): [FaqCategory!]!
  selectFaqCategoryCountByAdmin(where: FaqCategoryWhereInput): Int
  selectFaqCountByAdmin(where: FaqWhereInput): Int
  selectFaqsByEveryone(cursor: FaqWhereUniqueInput, orderBy: [FaqOrderByWithRelationInput!], skip: Int, take: Int, where: FaqWhereInput): [Faq!]!
  selectFreeUserDayLimitByAdmin: Int!
  selectFreeUserProductLimitByAdmin: Int!
  selectMyInfoByUser: User!
  selectMyProductByUser(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  selectMyProductsCountByUser(where: ProductWhereInput): Int!
  selectMySetDataByUser(cursor: UserSetDataWhereUniqueInput, orderBy: [UserSetDataOrderByWithRelationInput!], skip: Int, take: Int, where: UserSetDataWhereInput): [UserSetData!]!
  selectMyShopDataByUser(cursor: UserShopDataWhereUniqueInput, orderBy: [UserShopDataOrderByWithRelationInput!], skip: Int, take: Int, where: UserShopDataWhereInput): [UserShopData!]!
  selectNoticeByEveryone(noticeId: Int!): Notice!
  selectNoticeCountByAdmin(where: NoticeWhereInput): Int
  selectNoticesByEveryone(cursor: NoticeWhereUniqueInput, orderBy: [NoticeOrderByWithRelationInput!], skip: Int, take: Int, where: NoticeWhereInput): [Notice!]!
  selectOrdersByUser(cursor: OrderWhereUniqueInput, orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  selectPlanInfosForEveryone(cursor: PlanInfoWhereUniqueInput, orderBy: [PlanInfoOrderByWithRelationInput!], skip: Int, take: Int, where: PlanInfoWhereInput): [PlanInfo!]!
  selectProductsByAdmin(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  selectProductsBySomeone(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  selectProductsCountByAdmin(where: ProductWhereInput): Int
  selectProductsCountBySomeone(where: ProductWhereInput): Int
  selectSetDataByAdmin(cursor: UserSetDataWhereUniqueInput, orderBy: [UserSetDataOrderByWithRelationInput!], skip: Int, take: Int, where: UserSetDataWhereInput): [UserSetData!]!
  selectSetDataCountByAdmin(where: UserSetDataWhereInput): Int
  selectShopDataByAdmin(cursor: UserShopDataWhereUniqueInput, orderBy: [UserShopDataOrderByWithRelationInput!], skip: Int, take: Int, where: UserShopDataWhereInput): [UserShopData!]!
  selectShopDataCountByAdmin(where: UserShopDataWhereInput): Int
  selectSiilInfoBySomeone(code: String!): [SiilItems!]!
  selectTaobaoOrdersByAdmin(cursor: TaobaoOrderWhereUniqueInput, orderBy: [TaobaoOrderOrderByWithRelationInput!], skip: Int, take: Int, where: TaobaoOrderWhereInput): [TaobaoOrder!]!
  selectTaobaoProductsByAdmin(cursor: TaobaoProductWhereUniqueInput, orderBy: [TaobaoProductOrderByWithRelationInput!], skip: Int, take: Int, where: TaobaoProductWhereInput): [TaobaoProduct!]!
  selectTaobaoProductsByUser(cursor: TaobaoProductWhereUniqueInput, orderBy: [TaobaoProductOrderByWithRelationInput!], skip: Int, take: Int, where: TaobaoProductWhereInput): [TaobaoProduct!]!
  selectTaobaoProductsCountByAdmin(where: TaobaoProductWhereInput): Int
  selectTaobaoRefreshDayByEveryone: Int!
  selectUserQuestionBySomeone(cursor: UserQuestionWhereUniqueInput, orderBy: [UserQuestionOrderByWithRelationInput!], skip: Int, take: Int, where: UserQuestionWhereInput): [UserQuestion!]!
  selectUserQuestionCountBySomeone(where: UserQuestionWhereInput): Int
  selectUsersByAdmin(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  selectUsersCountByAdmin(where: UserWhereInput): Int!
  selectWordTablesBySomeone(cursor: WordTableWhereUniqueInput, orderBy: [WordTableOrderByWithRelationInput!], skip: Int, take: Int, where: WordTableWhereInput): [WordTable!]!
  t_get: String
  t_getEncodedSetInfo: String
  translateText(engine: TranslateEngineEnumType! = PAPAGO, text: String!): String!
  whoami: String
}

type SetParamType {
  """수정용"""
  encodedSetInfo: String
  number: String!
  siteCode: String!
  siteUserId: String!
  siteUserPw: String!
  siteUseretc1: String!
  siteUseretc2: String!
  siteUseretc3: String!
  siteUseretc4: String!
  siteUseretc5: String!
  siteUseretc6: String!
  sol_type: String!
  userCode: String!
}

type SignInType {
  accessToken: String!
  refreshToken: String!
}

input SiilInput {
  code: String!
  value: String!
}

type SiilItem {
  code: String!
  inputType: SiilItemTypeEnum!
  name: String!
  options: [String!]
}

enum SiilItemTypeEnum {
  INPUT
  SELECT
  YESNO
}

type SiilItems {
  data: [SiilItem!]!
  description: String!
}

type SiilSavedData {
  code: String!
  data: [SiilSavedItem!]!
}

type SiilSavedItem {
  code: String!
  value: String!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  subscribeTaobaoOrderQueueEventByAdmin: Int!
  subscribeUserEvent: UserLog
}

enum TaobaoItemOrderBy {
  """판매자 신용 순"""
  CREDIT

  """판매량순"""
  SALE
}

type TaobaoOrder {
  buyerMessage: String
  createdAt: DateTime!
  id: Int!
  logisticCompany: String
  modifiedAt: DateTime!
  order(cursor: OrderWhereUniqueInput, skip: Int, take: Int): [Order!]!
  originalData: String!
  realMoney: Float
  state: TaobaoOrderState!
  taobaoId: String!
  taobaoOrderNum: String!
  waybill: String
}

input TaobaoOrderOrderByWithRelationInput {
  buyerMessage: SortOrder
  createdAt: SortOrder
  id: SortOrder
  logisticCompany: SortOrder
  modifiedAt: SortOrder
  order: OrderOrderByRelationAggregateInput
  originalData: SortOrder
  realMoney: SortOrder
  state: SortOrder
  taobaoId: SortOrder
  taobaoOrderNum: SortOrder
  waybill: SortOrder
}

enum TaobaoOrderState {
  DONE
  WAIT_CONFIRM
  WAIT_SEND
}

input TaobaoOrderWhereInput {
  AND: [TaobaoOrderWhereInput!]
  NOT: [TaobaoOrderWhereInput!]
  OR: [TaobaoOrderWhereInput!]
  buyerMessage: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  logisticCompany: StringNullableFilter
  modifiedAt: DateTimeFilter
  order: OrderListRelationFilter
  originalData: StringFilter
  realMoney: FloatNullableFilter
  state: EnumTaobaoOrderStateFilter
  taobaoId: StringFilter
  taobaoOrderNum: StringFilter
  waybill: StringNullableFilter
}

input TaobaoOrderWhereUniqueInput {
  id: Int
}

type TaobaoProduct {
  brand: String!
  createdAt: DateTime!
  id: Int!
  imageThumbnail: String!
  modifiedAt: DateTime!
  name: String!
  options: TaobaoProductOptionInfo!
  originalData: String!
  price: Float!
  product(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  taobaoBrandId: String
  taobaoCategoryId: String!
  taobaoNumIid: String!
  videoUrl: String
}

type TaobaoProductOption {
  name: String!
  taobaoSkuId: String!
}

type TaobaoProductOptionInfo {
  option: [TaobaoProductOption!]!
  optionName: [TaobaoProductOptionName!]!
  optionValue: [TaobaoProductOptionValue!]!
}

type TaobaoProductOptionName {
  name: String!
  taobaoPid: String!
}

type TaobaoProductOptionValue {
  image: String
  name: String!
  taobaoVid: String!
}

input TaobaoProductOrderByWithRelationInput {
  brand: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imageThumbnail: SortOrder
  modifiedAt: SortOrder
  name: SortOrder
  originalData: SortOrder
  price: SortOrder
  product: ProductOrderByRelationAggregateInput
  taobaoBrandId: SortOrder
  taobaoCategoryId: SortOrder
  taobaoNumIid: SortOrder
  translateData: SortOrder
  videoUrl: SortOrder
}

input TaobaoProductWhereInput {
  AND: [TaobaoProductWhereInput!]
  NOT: [TaobaoProductWhereInput!]
  OR: [TaobaoProductWhereInput!]
  brand: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  imageThumbnail: StringFilter
  modifiedAt: DateTimeFilter
  name: StringFilter
  originalData: StringFilter
  price: FloatFilter
  product: ProductListRelationFilter
  taobaoBrandId: StringNullableFilter
  taobaoCategoryId: StringFilter
  taobaoNumIid: StringFilter
  translateData: StringNullableFilter
  videoUrl: StringNullableFilter
}

input TaobaoProductWhereUniqueInput {
  id: Int
  taobaoNumIid: String
}

enum TranslateEngineEnumType {
  BAIDU
  GOOGLE
  PAPAGO
}

enum TranslateTargetEnumType {
  """상품 전체 일괄번역,id:Product"""
  PRODUCT_ALL

  """상품 이름 번역,id:Product"""
  PRODUCT_NAME

  """상품 옵션 일괄번역,id:ProductOptionName"""
  PRODUCT_OPTION_ALL

  """상품 옵션 이름 번역,id:ProductOptionName"""
  PRODUCT_OPTION_NAME

  """상품 옵션별 이름 번역,id:ProductOptionValue"""
  PRODUCT_OPTION_VALUE
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  companyInfo: UserCompanyInfo
  createdAt: DateTime!
  email: String!
  id: Int!
  kakaoId: String
  naverId: String
  password: String
  product(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  productCount: Int!
  purchaseInfo: UserPurchaseInfo!
  state: UserState!
  userInfo: UserInfo
  userLog(cursor: UserLogWhereUniqueInput, orderBy: [UserLogOrderByWithRelationInput!], skip: Int, take: Int, where: UserLogWhereInput): [UserLog!]!
  userShopData(cursor: UserShopDataWhereUniqueInput, orderBy: [UserShopDataOrderByWithRelationInput!], skip: Int, take: Int, where: UserShopDataWhereInput): [UserShopData!]!
}

type UserCompanyInfo {
  code: String!
  name: String!
  ownerName: String!
  user: User!
  userId: Int!
}

input UserCompanyInfoInput {
  code: String!
  name: String!
  ownerName: String!
}

input UserCompanyInfoOrderByWithRelationInput {
  code: SortOrder
  name: SortOrder
  ownerName: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input UserCompanyInfoWhereInput {
  AND: [UserCompanyInfoWhereInput!]
  NOT: [UserCompanyInfoWhereInput!]
  OR: [UserCompanyInfoWhereInput!]
  code: StringFilter
  name: StringFilter
  ownerName: StringFilter
  user: UserWhereInput
  userId: IntFilter
}

type UserInfo {
  additionalShippingFeeJeju: Int
  asInformation: String
  asTel: String
  cnyRate: Float!
  codeFile: String
  defaultShippingFee: Int!
  exchangeShippingFee: Int
  fixImageBottom: String
  fixImageTop: String
  marginRate: Float!
  maxProductLimit: Int
  phone: String
  productCollectCount: Int!
  refundAccountInfo: AccountInfo
  refundAccountInfoData: String
  refundShippingFee: Int
  user: User!
  userId: Int!
}

input UserInfoOrderByWithRelationInput {
  additionalShippingFeeJeju: SortOrder
  asInformation: SortOrder
  asTel: SortOrder
  cnyRate: SortOrder
  codeFile: SortOrder
  defaultShippingFee: SortOrder
  exchangeShippingFee: SortOrder
  fixImageBottom: SortOrder
  fixImageTop: SortOrder
  marginRate: SortOrder
  maxProductLimit: SortOrder
  phone: SortOrder
  productCollectCount: SortOrder
  refundAccountInfoData: SortOrder
  refundShippingFee: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input UserInfoWhereInput {
  AND: [UserInfoWhereInput!]
  NOT: [UserInfoWhereInput!]
  OR: [UserInfoWhereInput!]
  additionalShippingFeeJeju: IntNullableFilter
  asInformation: StringNullableFilter
  asTel: StringNullableFilter
  cnyRate: FloatFilter
  codeFile: StringNullableFilter
  defaultShippingFee: IntFilter
  exchangeShippingFee: IntNullableFilter
  fixImageBottom: StringNullableFilter
  fixImageTop: StringNullableFilter
  marginRate: FloatFilter
  maxProductLimit: IntNullableFilter
  phone: StringNullableFilter
  productCollectCount: IntFilter
  refundAccountInfoData: StringNullableFilter
  refundShippingFee: IntNullableFilter
  user: UserWhereInput
  userId: IntFilter
}

type UserLog {
  createdAt: DateTime!
  id: Int!
  isRead: Boolean!
  payloadData: String!
  title: String!
  user: User!
  userId: Int!
}

input UserLogListRelationFilter {
  every: UserLogWhereInput
  none: UserLogWhereInput
  some: UserLogWhereInput
}

input UserLogOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input UserLogOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  isRead: SortOrder
  payloadData: SortOrder
  title: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input UserLogWhereInput {
  AND: [UserLogWhereInput!]
  NOT: [UserLogWhereInput!]
  OR: [UserLogWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  isRead: BoolFilter
  payloadData: StringFilter
  title: StringFilter
  user: UserWhereInput
  userId: IntFilter
}

input UserLogWhereUniqueInput {
  id: Int
}

enum UserLoginType {
  ADMIN
  EMAIL
  KAKAO
  NAVER
}

input UserOrderByWithRelationInput {
  companyInfo: UserCompanyInfoOrderByWithRelationInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  kakaoId: SortOrder
  naverId: SortOrder
  password: SortOrder
  product: ProductOrderByRelationAggregateInput
  purchaseLog: PurchaseLogOrderByRelationAggregateInput
  state: SortOrder
  userInfo: UserInfoOrderByWithRelationInput
  userLog: UserLogOrderByRelationAggregateInput
  userQuestion: UserQuestionOrderByRelationAggregateInput
  userShopData: UserShopDataOrderByRelationAggregateInput
  wordTable: WordTableOrderByRelationAggregateInput
}

type UserPurchaseAdditionalInfo {
  expiredAt: DateTime!
  type: UserPurchaseAdditionalInfoEnumType!
}

enum UserPurchaseAdditionalInfoEnumType {
  IMAGE_TRANSLATE
  STOCK
}

type UserPurchaseInfo {
  additionalInfo: [UserPurchaseAdditionalInfo!]!
  level: Int!
  levelExpiredAt: DateTime!
}

type UserQuestion {
  answer: String
  answeredAt: DateTime
  attachmentFile: String
  attachmentFiles: [String!]!
  content: String!
  createdAt: DateTime!
  id: Int!
  isActive: Boolean!
  title: String!
  user: User!
  userId: Int!
}

input UserQuestionListRelationFilter {
  every: UserQuestionWhereInput
  none: UserQuestionWhereInput
  some: UserQuestionWhereInput
}

input UserQuestionOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input UserQuestionOrderByWithRelationInput {
  answer: SortOrder
  answeredAt: SortOrder
  attachmentFile: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  title: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input UserQuestionWhereInput {
  AND: [UserQuestionWhereInput!]
  NOT: [UserQuestionWhereInput!]
  OR: [UserQuestionWhereInput!]
  answer: StringNullableFilter
  answeredAt: DateTimeNullableFilter
  attachmentFile: StringNullableFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  isActive: BoolFilter
  title: StringFilter
  user: UserWhereInput
  userId: IntFilter
}

input UserQuestionWhereUniqueInput {
  id: Int
}

type UserSetData {
  id: Int!
  name: String!
  setFilePath: String!
  userShopData: UserShopData!
  userShopDataId: Int!
}

input UserSetDataListRelationFilter {
  every: UserSetDataWhereInput
  none: UserSetDataWhereInput
  some: UserSetDataWhereInput
}

input UserSetDataOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input UserSetDataOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  productStore: ProductStoreOrderByRelationAggregateInput
  setFilePath: SortOrder
  userShopData: UserShopDataOrderByWithRelationInput
  userShopDataId: SortOrder
}

input UserSetDataWhereInput {
  AND: [UserSetDataWhereInput!]
  NOT: [UserSetDataWhereInput!]
  OR: [UserSetDataWhereInput!]
  id: IntFilter
  name: StringFilter
  productStore: ProductStoreListRelationFilter
  setFilePath: StringFilter
  userShopData: UserShopDataWhereInput
  userShopDataId: IntFilter
}

input UserSetDataWhereUniqueInput {
  id: Int
}

type UserShopData {
  id: Int!
  siteCode: String!
  siteUserId: String!
  siteUserPw: String!
  siteUseretc1: String!
  siteUseretc2: String!
  siteUseretc3: String!
  siteUseretc4: String!
  siteUseretc5: String!
  siteUseretc6: String!
  user: User!
  userId: Int!
  userSetData(cursor: UserSetDataWhereUniqueInput, skip: Int, take: Int): [UserSetData!]!
}

input UserShopDataListRelationFilter {
  every: UserShopDataWhereInput
  none: UserShopDataWhereInput
  some: UserShopDataWhereInput
}

input UserShopDataOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input UserShopDataOrderByWithRelationInput {
  createdAt: SortOrder
  etc: SortOrder
  id: SortOrder
  isActive: SortOrder
  modifiedAt: SortOrder
  order: OrderOrderByRelationAggregateInput
  productStore: ProductStoreOrderByRelationAggregateInput
  siteCode: SortOrder
  siteUserId: SortOrder
  siteUserPw: SortOrder
  siteUseretc1: SortOrder
  siteUseretc2: SortOrder
  siteUseretc3: SortOrder
  siteUseretc4: SortOrder
  siteUseretc5: SortOrder
  siteUseretc6: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  userSetData: UserSetDataOrderByRelationAggregateInput
}

input UserShopDataUQ_user_shop_data_uniqueCompoundUniqueInput {
  siteCode: String!
  siteUserId: String!
  userId: Int!
}

input UserShopDataWhereInput {
  AND: [UserShopDataWhereInput!]
  NOT: [UserShopDataWhereInput!]
  OR: [UserShopDataWhereInput!]
  createdAt: DateTimeFilter
  etc: StringNullableFilter
  id: IntFilter
  isActive: BoolNullableFilter
  modifiedAt: DateTimeFilter
  order: OrderListRelationFilter
  productStore: ProductStoreListRelationFilter
  siteCode: StringFilter
  siteUserId: StringFilter
  siteUserPw: StringFilter
  siteUseretc1: StringFilter
  siteUseretc2: StringFilter
  siteUseretc3: StringFilter
  siteUseretc4: StringFilter
  siteUseretc5: StringFilter
  siteUseretc6: StringFilter
  user: UserWhereInput
  userId: IntFilter
  userSetData: UserSetDataListRelationFilter
}

input UserShopDataWhereUniqueInput {
  UQ_user_shop_data_unique: UserShopDataUQ_user_shop_data_uniqueCompoundUniqueInput
  id: Int
}

enum UserSocialType {
  EMAIL
  KAKAO
  NAVER
}

enum UserState {
  ACTIVE
  DELETED
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  companyInfo: UserCompanyInfoWhereInput
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  kakaoId: StringNullableFilter
  naverId: StringNullableFilter
  password: StringFilter
  product: ProductListRelationFilter
  purchaseLog: PurchaseLogListRelationFilter
  state: EnumUserStateFilter
  userInfo: UserInfoWhereInput
  userLog: UserLogListRelationFilter
  userQuestion: UserQuestionListRelationFilter
  userShopData: UserShopDataListRelationFilter
  wordTable: WordTableListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
  kakaoId: String
  naverId: String
}

type WordTable {
  findWord: String!
  id: Int!
  replaceWord: String
  user: User!
  userId: Int!
}

input WordTableListRelationFilter {
  every: WordTableWhereInput
  none: WordTableWhereInput
  some: WordTableWhereInput
}

input WordTableOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input WordTableOrderByWithRelationInput {
  findWord: SortOrder
  id: SortOrder
  replaceWord: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input WordTableUQ_word_table_wordCompoundUniqueInput {
  findWord: String!
  userId: Int!
}

input WordTableWhereInput {
  AND: [WordTableWhereInput!]
  NOT: [WordTableWhereInput!]
  OR: [WordTableWhereInput!]
  findWord: StringFilter
  id: IntFilter
  replaceWord: StringNullableFilter
  user: UserWhereInput
  userId: IntFilter
}

input WordTableWhereUniqueInput {
  UQ_word_table_word: WordTableUQ_word_table_wordCompoundUniqueInput
  id: Int
}
